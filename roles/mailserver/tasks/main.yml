---
- stat: path="{{ project_root }}/.env"
  register: env_file

- stat: path="{{ project_root }}/dnsconfig.log"
  register: dns_file

- name: Ensure docker-compose down
  docker_compose:
    project_src: "{{ project_root }}"
    state: absent
  ignore_errors: yes
  when: env_file.stat.exists

- name: Ensure directories
  file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    state: directory
  loop:
    - { path: "{{ project_root }}", owner: "{{ mailserver_user }}" }    

- name: Ensure files
  copy:
    src: "{{ item.file }}"
    dest: "{{ item.destination }}"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    mode: "{{ item.mode }}"
  loop:
    - { file: "docker-compose.yml", destination: "{{ project_root }}/docker-compose.yml", owner: "{{ mailserver_user }}", mode: "0755" }

- name: Ensure source files from github
  get_url:
    url: "{{ item.file }}"
    dest: "{{ item.destination }}"
    force: "{{ item.force }}"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    mode: "{{ item.mode }}"
  loop:
    - { file: "https://raw.githubusercontent.com/docker-mailserver/docker-mailserver/master/setup.sh", destination: "{{ project_root }}/setup.sh", force: "no", owner: "{{ mailserver_user }}", mode: "0775"}
    - { file: "https://raw.githubusercontent.com/docker-mailserver/docker-mailserver/master/mailserver.env", destination: "{{ project_root }}/mailserver.env", force: "no", owner: "{{ mailserver_user }}", mode: "0775"}
  become: yes

- name: Ensure templates
  template:
    src: "{{ item.file }}"
    dest: "{{ item.destination }}"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    mode: "{{ item.mode }}"
    force: "{{ item.force }}"
  loop:
    - { file: "env.j2", destination: "{{ project_root }}/.env", owner: "{{ mailserver_user }}", mode: "0644", force: "no" }
    - { file: "install.j2", destination: "{{ project_root }}/install.sh", owner: "{{ mailserver_user }}", mode: "0755", force: "yes" }
  become: yes

- name: Ensure mailserver.env configs
  lineinfile:
    path: "{{ project_root }}/mailserver.env"
    state: "{{ item.state }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  become: yes
  loop:
    - { regexp: '^SSL_TYPE=(.*)', line: 'SSL_TYPE=letsencrypt', state: "present" }
    - { regexp: '^ENABLE_FAIL2BAN=(.*)', line: 'ENABLE_FAIL2BAN={{ config_fail2ban }}', state: "present" }
    - { regexp: '^POSTMASTER_ADDRESS=(.*)', line: 'POSTMASTER_ADDRESS={{ config_postmaster }}', state: "present" }
    - { regexp: '^PFLOGSUMM_TRIGGER=(.*)', line: 'PFLOGSUMM_TRIGGER={{ config_log_trigger }}', state: "present" }
    - { regexp: '^POSTFIX_MESSAGE_SIZE_LIMIT=(.*)', line: 'POSTFIX_MESSAGE_SIZE_LIMIT={{ config_message_limit }}', state: "present" }

- import_tasks: letsencrypt.yml

- name: Ensure docker-compose up
  docker_compose:
    project_src: "{{ project_root }}"
    pull: yes

- name: Ensure inital user and dnsconfig
  shell: "./install.sh -k"
  args:
    chdir: "{{ project_root }}"
  become: yes
  when: dns_file.stat.exists == False
  notify:
    - compose down
    - compose up
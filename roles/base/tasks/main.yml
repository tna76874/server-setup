---
- name: Ensure wrong hostname is not in hosts file
  lineinfile:
    dest: /etc/hosts
    regexp: '{{ ansible_hostname }}$'
    state: absent
    backup: yes
  when: ansible_hostname != inventory_hostname_short

- name: Ensure Hostname
  hostname:
    name: '{{ inventory_hostname_short }}'
  when: ansible_hostname != inventory_hostname_short

- name: Ensure Hostname in hosts file
  lineinfile:
    dest: /etc/hosts
    regexp: '{{ inventory_hostname_short }}$'
    line: '{{ ansible_default_ipv4.address }} {{ inventory_hostname }} {{ inventory_hostname_short }}'
    state: present
  when: ansible_default_ipv4.address is defined

- name: autoremove apt
  apt:
    autoremove: yes
  ignore_errors: yes

- name: Update apt
  apt:
    update_cache: yes
    cache_valid_time: 3600
    upgrade: safe
  register: result
  failed_when: False
  changed_when:
    - '"dpkg --configure -a" in result.msg'
  notify:
    - reconfigure

- name: Flush handlers
  meta: flush_handlers

- name: Ensure basic packages
  apt:
    name:
      - byobu
      - zsh
      - curl
      - wget
      - dnsutils
      - git
      - sudo
      - htop
      - vim
      - nano
      - openssh-server
      - zip
      - unzip
      - screen
      - ncdu
      - bmon
      - snapd
      - htop
      - powertop
    state: present

- name: Update dist
  apt:
    upgrade: dist
  when: config_update_dist|bool

- name: Ensure clean motd
  file:
    path: '/etc/update-motd.d/{{item}}'
    state: absent
  with_items:
    - 10-help-text
    - 50-motd-news
    - 80-esm
    - 80-livepatch

- name: Ensure clean motd, news updater doesn't run
  systemd:
    name: motd-news
    enabled: no
    masked: yes
  ignore_errors: yes

- name: Ensure notice about configuration managment in motd
  copy:
    content: |
      #!/bin/sh
      printf "\n"
      printf "This system is managed with ansible, see following repository for details\n"
      printf "https://github.com/tna76874/server-setup\n"
      printf "\n"
    mode: 0755
    dest: /etc/update-motd.d/11-help-text
  ignore_errors: yes

- name: Ensure that LANG from ssh clients is not used
  lineinfile:
    path: /etc/ssh/sshd_config
    line: 'AcceptEnv LANG LC_*'
    state: absent
  notify: restart sshd

- name: Ensure scripts
  template:
    src: "{{ item.file }}"
    dest: "{{ item.destination }}"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    mode: "{{ item.mode }}"
  become: yes
  loop:
    - { file: "backup.j2", destination: "/usr/local/bin/backup", owner: "root", mode: "0755" }
    - { file: "dockerexport.j2", destination: "/usr/local/bin/dockerexport.sh", owner: "root", mode: "0750" }
    - { file: "custom_cronjobs.j2", destination: "/usr/local/bin/custom_cronjobs", owner: "root", mode: "0750" }

- name: Register timezone
  set_fact: time_zone="Europe/Berlin"
  when: time_zone is undefined

- name: Ensure timezone
  timezone:
    name: "{{ time_zone }}"
  notify: restart cron

- name: Ensure custom cron jobs
  cron:
    name: nextcloud backup
    minute: "{{ config_cron_job.minute }}"
    hour:   "{{ config_cron_job.hour }}"
    day:  "{{ config_cron_job.day }}"
    month: "{{ config_cron_job.month }}"
    user: root
    job: "/usr/local/bin/custom_cronjobs > /dev/null 2>&1"
    cron_file: custom_cron_jobs
    state: "{% if (job_list != []) %}present{% else %}absent{% endif %}"
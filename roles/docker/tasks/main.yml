---
# source: https://docs.docker.com/engine/install/ubuntu/
- name: Ensure Prequisitions for Docker are met
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
    state: present


- name: Create keyrings directory
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Ensure Docker Key is present
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Ensure Docker Repository is present
  apt_repository:
    repo: deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_facts['lsb']['codename'] }} stable
    state: present
    filename: docker

- name: Ensure docker-compose is absent from apt package
  apt:
    name:
      - docker-compose
    state: absent

- name: Ensure Docker is installed
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - python3
      - python3-pip
    state: present

- name: Ensure pip packages
  pip:
    name: "{{ item.name }}"
    executable: "{{ item.executable }}"
    state: "{{ item.state }}"
  become: true
  loop:
    - { name: "pip", executable: "pip3", state: "latest"}
    - { name: "requests", executable: "pip3", state: "latest"}
    - { name: "docker-compose", executable: "pip3", state: "present"}

- name: Determine existing sudo users
  shell: 'grep sudo /etc/group | cut -d: -f4 | tr , "\n"'
  changed_when: false 
  register: sudo_users

- name: Ensure Users are in Docker group
  user:
    name: '{{ item }}'
    groups: docker
    append: yes
    state: present
  with_items: '{{ sudo_users.stdout_lines }}'


## Pruning unused docker images
- name: Prune docker stuff
  community.docker.docker_prune:
    containers: yes
    images: yes
    networks: no
    volumes: no
    builder_cache: yes
  when: docker_prune_images|default(False)|bool


## GETTING COMPOSE BINARY
- name: getting latest compose binary
  block:
    - name: Query compose tags from github
      uri:
        url: https://api.github.com/repos/docker/compose/releases?page_size=10000
        return_content: true
      register: compose_github_tags
      ignore_errors: yes

    - name: Register compose_tag
      set_fact:
        compose_tag:  "{{ (compose_github_tags.json | rejectattr('name', 'contains', '-') | selectattr('name', 'contains', 'v2') | list)[0]['name'] }}"

    - name: Get compose binary github url
      set_fact:
        compose_bin_url:  "{{ (((compose_github_tags.json | selectattr('name', 'equalto', compose_tag) | list)[0]['assets']) | selectattr('name', 'equalto', 'docker-compose-linux-x86_64') | list)[0]['browser_download_url']  }}"

    - name: Install docker-compose from official github repo
      get_url:
        url : "{{ compose_bin_url }}"
        dest: /usr/local/bin/docker-compose
        mode: 'u+x,g+x'
        group: 'docker'
      become: yes
  when: lastest_compose|default(False)|bool